# configuration file for BOUT++
# September 2008: Converted to use autoconf. Can be manually edited
# for the (very) rare occasions when autoconf fails

# extra compilation flags:
# -DCHECK      Enables a host of additional checks on each operation
#              such as uninitialised data. Helps when debugging
# -DTRACK      Keeps track of variable names.
#              Enables more useful error messages
# for SSE2: -msse2 -mfpmath=sse
# 
# This must also specify one or more file formats
# -DPDBF  PDB format (need to include pdb_format.cxx)
# -DNCDF  NetCDF format (nc_format.cxx)

# PETSc config variables need to be first, else they may clobber other
# options (e.g. CXX, CXXFLAGS)
@PETSC@
@SLEPC_VARS@

# Created this variable so that a user won't overwrite the CXXFLAGS variable
# on the command line, just add to this one
BOUT_FLAGS		= $(CXXFLAGS) @CXXFLAGS@ @OPENMP_CXXFLAGS@ @CXX11_FLAGS@

# Specify the MPI C++ compiler in CXX

CXX			= @MPICXX@
CC                      = $(CXX)

AR			= ar
RANLIB			= @RANLIB@
MKDIR			= @MKDIR@

####################################################################
# Do not need to alter anything below
####################################################################

LD			= $(CXX)
LDFLAGS = @LDFLAGS@

####################################################################
# Extra (optional) source files, includes and libs
# NOTE: EXTRA_SRC must include a solver (solver.cxx or ida_solver.cxx)
#       and a file format (nc_format.cxx or pdb_format.cxx)
####################################################################

EXTRA_INCS		= @EXTRA_INCS@
EXTRA_LIBS		= @EXTRA_LIBS@ @OPENMP_CXXFLAGS@

PRECON_SOURCE	= @PRECON_SOURCE@
FACETS_SOURCE   = @FACETS_SOURCE@

####################################################################
# These are used for compiling physics modules using BOUT++ library
####################################################################

# Files that are needed by configure and should be dependencies for 'all'

OBJ						= $(SOURCEC:%.cxx=%.o)
LIB						= $(BOUT_TOP)/lib/libbout++.a

BOUT_INCLUDE	= -I$(BOUT_TOP)/include $(CXXINCLUDE) $(EXTRA_INCS)
BOUT_LIBS			= -lm -L$(BOUT_TOP)/lib -lbout++ $(EXTRA_LIBS)

#DEPS					= $(SOURCEC:.cxx=.d)
CHANGED				= $(shell find -f $(BOUT_TOP)/include $(BOUT_TOP)/src -type f \( -name \*.cxx -or -name \*.h \) -newer $(LIB) -print 2> /dev/null)

# Need to use ifndef because TARGET could be set in a file (as opposed to the command line or environment variable)
# This will set a default if no TARGET is provided
ifndef TARGET
TARGET				= $(SOURCEC:%.cxx=%)
endif

####################################################################
# Definining stuff for recursive make
####################################################################

# Phony targets since they are directory names
.PHONY: $(DIRS) lib install

all: $(BOUT_TOP)/config.status $(BOUT_TOP)/make.config $(DIRS) $(TARGET)

####################################################################
# Recursively run make through subdirs
####################################################################

$(DIRS):
	@$(MAKE) --no-print-directory -s -C $@ all

# Create 'lib' and 'include' incase they don't exist
$(BOUT_TOP)/include $(BOUT_TOP)/lib:
	$(MKDIR) $@

####################################################################
# Install header files and libraries
####################################################################
prefix = @prefix@
exec_prefix = @exec_prefix@
install: all
	@$(MKDIR) $(DESTDIR)${prefix}
	@$(MKDIR) $(DESTDIR)${prefix}/include
	@$(MKDIR) $(DESTDIR)${prefix}/lib
	@echo "Installing header files into $(DESTDIR)@includedir@"
	@cp include/*.hxx $(DESTDIR)@includedir@
	@echo "Installing library files into $(DESTDIR)@libdir@"
	@cp lib/*.a $(DESTDIR)@libdir@

####################################################################
# A bit of a clever hack that determines wheter the TARGET variable is 'lib'
# then, if true, adds the .o files to libbout++.a, else, it links the .o's
# into an executable
####################################################################

ifeq ("$(TARGET)", "lib")
#BEGIN 'lib'

####################################################################
# The prerquisites of any .o file should depend on
# $(BOUT_TOP)/make.config
# $(BOUT_TOP)/makefile
# which are generated by configuration
####################################################################

#-include $(DEPS)

# This automatically generates dependency rules
#%.d : %.cxx
#	-@$(CXX) $(BOUT_INCLUDE) $(BOUT_FLAGS) -MF"$@" -MG -MP -MM -MT"$(<:.cxx=.o)" -fsyntax-only "$<" 2> /dev/null

####################################################################
# Notes about the different flags:
# -MF  write the generated dependency rule to a file
# -MG  assume missing headers will be generated and don't stop with an error
# -MM  generate dependency rule for prerequisite, skipping system headers
# -MP  add phony target for each header to prevent errors when header is missing
# -MT  add a target to the generated dependency
####################################################################

####################################################################
# Builds the library with $(OBJ) which is defined from the SOURCEC variable
####################################################################

lib: makefile $(BOUT_TOP)/make.config $(BOUT_TOP)/include $(BOUT_TOP)/lib $(OBJ)
ifneq ("$(OBJ)foo", "foo")
	@echo "Adding $(OBJ) to libbout++.a"
	@$(AR) cru $(LIB) $(OBJ)
	@$(RANLIB) $(LIB)
endif

#END 'lib'
else


####################################################################
# Make libbout++.a if it doesn't exist with the checklib target
####################################################################
%.a:
	@echo "Rebuilding out-of-date bout++ library"
	@$(MAKE) --no-print-directory -C $(BOUT_TOP)
 
####################################################################
# Make the target (e.g. gas_compress)
####################################################################
$(TARGET).cxx: checklib
$(TARGET).o: $(LIB)
$(TARGET): makefile $(BOUT_TOP)/make.config $(OBJ)
	@echo "  Linking" $(TARGET)
	@$(LD) $(LDFLAGS) -o $(TARGET) $(OBJ) $(BOUT_LIBS)

checklib:
ifneq ("$(CHANGED)foo", "foo")
	@echo "Rebuilding out-of-date bout++ library"
	@$(MAKE) --no-print-directory -C $(BOUT_TOP)
endif

endif

%.o: $(BOUT_TOP)/make.config %.cxx
	@echo "  Compiling " $(@F:.o=.cxx)
	@$(CXX) $(BOUT_INCLUDE) $(BOUT_FLAGS) -c $(@F:.o=.cxx) -o $@

####################################################################
# Clean target. Pretty self explanatory.
# NOTE: See that double colon (::) below? That's signifies a rule that can be added to later
# See:
# http://owen.sj.ca.us/~rk/howto/slides/make/slides/makecolon.html
####################################################################

clean::
	-@$(RM) -rf $(OBJ) $(DEPS) $(TARGET)
	@for pp in $(DIRS); do echo "  " $$pp cleaned; $(MAKE) --no-print-directory -C $$pp clean; done

distclean: clean
	@echo include cleaned
# Removing the externalpackage installation. When we have more packages, need a better way
	@$(RM) -rf $(BOUT_TOP)/include/pvode
	@echo lib cleaned
	@$(RM) -rf $(BOUT_TOP)/lib/*
	-@$(RM) $(BOUT_TOP)/externalpackages/PVODE/lib/*.a
	-@$(RM) $(BOUT_TOP)/externalpackages/PVODE/source/obj/*.o
	-@$(RM) $(BOUT_TOP)/externalpackages/PVODE/precon/obj/*.o
	-@$(RM) -rf $(BOUT_TOP)/autom4te.cache make.config
	@echo externalpackages cleaned
	@touch $(BOUT_TOP)/configure
	@echo autom4te.cache cleaned
