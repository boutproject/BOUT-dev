#!/usr/bin/env python

# 
# Run the test, compare results
#

# Variables to compare
from __future__ import print_function
try:
  from builtins import str
except:
  pass

varCorrect="fld1"
varsComp  = ["fld2", "fld3"]
name = "FieldGroup comm"
exeName = "test"
tol = 1e-6  # Relative tolerance

from boututils.run_wrapper import shell, launch, getmpirun
from boutdata.collect import collect
from numpy import abs
from sys import stdout, exit

MPIRUN=getmpirun()

print("Making {nm} test".format(nm=name))
shell("make > make.log")

print("Running {nm} test".format(nm=name))
success = True

for nproc in [1,2,4]:
  nxpe = 1
  if nproc > 2:
    nxpe = 2
  
  cmd = "./{exe} ".format(exe=exeName)
  
  shell("rm data/BOUT.dmp.*.nc")

  print("   %d processors ...." % (nproc))
  s, out = launch(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)
  f = open("run.log."+str(nproc), "w")
  f.write(out)
  f.close()
  
  #Analyse result
  #/"Correct" answer
  f1 = collect(varCorrect, path="data", info=False) ; f1max=abs(f1).max()
  #/Two different fields which should be identical to correct
  err=[]
  for v in varsComp:
    tmp = collect(v, path="data", info=False)
    err.append(abs((f1-tmp)).max()/f1max)

  for i,e in enumerate(err):
    if e>tol:
      print("Fail, in {i}th comparison relative error is {re}".format(i=i,re=e))
      success = False
    

if success:
  print(" => All {nm} passed".format(nm=name))
  exit(0)
else:
  print(" => Some failed tests")
  exit(1)

