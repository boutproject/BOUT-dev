##################################################
# Global settings used by the core code

NOUT = 50          # number of time-steps
TIMESTEP = 1.e3       # time between outputs
archive = 20        # Archive restart files after this number of outputs
wall_limit = 4  # wall time limit (in hours)

TwistShift = true   # use twist-shift condition?

ShiftInitial = true

MZ = 64             # number of points in z direction (2^n)
ZPERIOD = 1        # Fraction of a torus to simulate

MXG = 2
MYG = 2

grid = "slab_68x32.nc"  # Grid file

dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

##################################################
[mesh]
symmetricGlobalX = true

[mesh:paralleltransform]
type= shifted # Use shifted metric method

##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]

# max_mode = 16  # Maximum N to solve for
all_terms = false
laplace_nonuniform = false
filter = 0.2   # Remove the top 20% of modes (BOUT-06 zwindow=0.4)

##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[mesh:ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[mesh:ddy]

first = C4
second = C4
upwind = W3

[mesh:ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

mxstep = 5000   # Number of internal steps between outputs
adams_moulton = false # Use Adams-Moulton method (default is BDF)
func_iter = false     # Functional iteration (default is Newton)

##################################################

[2field]

eta = 1.e-5  # Resistivity
mu = -1  # Viscosity

bracket_method = 2 # Method to use for [f,g] terms
                   # 0 = Use default differencing methods
                   # 1 = Simplified operator
                   # 2 = Arakawa scheme
                   # 3 = Corner Transport Upwind (CTU)

parallel_lc = false # Use quasi-staggered LtoC and CtoL in Y
nonlinear = false   # Include nonlinear terms?

include_jpar0 = false

jpar_bndry = 3

[All]
scale = 0.0 # default size of initial perturbations

# boundary conditions
# -------------------
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = neumann

########### Evolving variables

[U]   # vorticity

[Apar]

function = (1 - 4*(x-0.5)^2 )*sin(3*y - z)
scale = 0.0

########### Auxilliary variables

[jpar]

[phi]
bndry_xin = dirichlet   # Radial boundaries specified in inversion
bndry_xout = dirichlet

########## External field

[Apar_ext]

function = (1-4*x*(1-x))*sin(3*y - z)
scale = 1.e-2

[Phi0_ext]
function = x
scale = 0.

