#!/usr/bin/env python

# Python script to run and analyse MMS test

from __future__ import division
from __future__ import print_function
from builtins import str

from boututils.run_wrapper import shell, launch, getmpirun
from boutdata.collect import collect

from numpy import sqrt, max, abs, mean, array, log

from os.path import join

MPIRUN = getmpirun()

print("Making MMS test")
shell("make > make.log")

nxlist = [16, 32, 64, 128, 256]

nout = 1
timestep = 0.1

nproc = 2

# Input directories
inputs = ["orthogonal", "shifted"]

success = True

for dir in inputs:
    print("Running test in '%s'" % (dir))
    
    error_2   = []  # The L2 error (RMS)
    error_inf = []  # The maximum error
    
    for nx in nxlist:
        args = "-d "+dir+" nout="+str(nout)+" timestep="+str(timestep) + " mesh:ny="+str(nx)+" mesh:nz="+str(nx)
        
        print("  Running with " + args)
        
        # Delete old data
        shell("rm "+dir+"/BOUT.dmp.*.nc")
        
        # Command to run
        cmd = "./fieldalign "+args
        # Launch using MPI
        s, out = launch(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)
        
        # Save output to log file
        f = open("run.log."+str(nx), "w")
        f.write(out)
        f.close()
        
        # Collect data
        E_f = collect("E_f", tind=[nout,nout], path=dir,info=False)
        
        # Average error over domain, not including guard cells
        l2 = sqrt(mean(E_f**2))
        linf = max(abs( E_f ))
        
        error_2.append( l2 )
        error_inf.append( linf )
        
        print("  -> Error norm: l-2 %f l-inf %f" % (l2, linf))

    # Calculate grid spacing
    dx = 1. / (array(nxlist) - 2.)

    # Calculate convergence order
    
    order = log(error_2[-1] / error_2[-2]) / log(dx[-1] / dx[-2])
    
    print("Convergence order = %f" % (order))
    if order < 1.5:
        print("=> FAILED\n")
        success = False

    try:
        import matplotlib.pyplot as plt
        # plot errors
    
        plt.figure()
    
        plt.plot(dx, error_2, '-o', label=r'$l^2$')
        plt.plot(dx, error_inf, '-x', label=r'$l^\infty$')
    
        plt.plot(dx, error_2[-1]*(dx/dx[-1])**order, '--', label="Order %.1f"%(order))
    
        plt.legend(loc="upper left")
        plt.grid()
    
        plt.yscale('log')
        plt.xscale('log')
    
        plt.xlabel(r'Mesh spacing $\delta x$')
        plt.ylabel("Error norm")
    
        plt.savefig(join(dir,"norm.pdf"))

        #plt.show()
        plt.close()

    except all:
        pass

if success:
    print(" => All tests passed")
    exit(0)
else:
    print(" => Some failed tests")
    exit(1)
