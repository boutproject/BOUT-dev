
BOUT_TOP	= ..

DIRS			= field fileio invert mesh physics solver sys fmt

SOURCEC		= bout++.cxx bout++-time.cxx
SOURCEH		= bout.hxx
CXXFLAGS       += -DMD5SUM=$(CHECKSUM) -DBOUT_REVISION="$(BOUT_REVISION)"
TARGET	       ?= lib

# Checksum passed to bout++.cxx
CHECKSUM := $(shell cat $(foreach DIR,$(DIRS),$(wildcard $(DIR)/*.cxx $(DIR)/*.hxx)) | md5sum | head -c 32 )

# Git revision passed to bout++.cxx
BOUT_REVISION := $(shell git rev-parse HEAD 2> /dev/null || hg id -n 2> /dev/null || { echo "Unknown"; } )

# From the legacy build script:
# This is a little obscure, so here is an explanation:
# the first 'all: initial_message' sets the prerequisite 'inital_message'
# to be the first one called
all: initial_message

# Then the config file is included, which has all the other
# prerequisites for 'all'
include $(BOUT_TOP)/make.config

# Rebuild bout++-time to get the correct time of the build - but only if
# any other file was rebuild
bout++-time.o: $(BOUT_LIB_PATH)/.last.o.file | $(DIRS) bout++.o

# The recipie could be removed, as it only catches the case of
# out-of-date make.config
# The rest is needed to tell make that .last.o.file will be created
$(BOUT_LIB_PATH)/.last.o.file: | $(DIRS)
	@test -f $@ || \
	   echo "make.config is out of date - run ./configure"
	@test -f $@ || \
	   exit 1

libfast: | @LIB_TO_BUILD@

$(BOUT_LIB_PATH)/libbout++.a: bout++-time.o
	@echo "Recreating libbout++.a"
	@rm -f $(LIB_A)
	@$(AR) $(ARFLAGS) $(LIB_A) $(shell find $(BOUT_TOP)/src -name \*.o -type f -print 2> /dev/null) || rm -f $(LIB_A)
	@touch .libfast
	@#$(RANLIB) $(LIB)
	@@STATIC_EXTRA@

$(BOUT_LIB_PATH)/libbout++.so: bout++-time.o
	@echo "Creating libbout++.so"
	@echo $(BOUT_FLAGS) | grep -qi pic || (echo "not compiled with PIC support - reconfigure with --enable-shared" ;exit 1)
	@$(RM) $(BOUT_LIB_PATH)/*.so*
	@$(CXX) -shared -Wl,-soname,libbout++.so.$(BOUT_VERSION) -o $(LIB_SO).$(BOUT_VERSION) \
		$(shell find $(BOUT_TOP)/src -name \*.o -type f -print 2> /dev/null) \
		$(LDFLAGS)
	@$(CXX) -shared -Wl,-soname,libpvode.so.1.0.0 -o $(BOUT_LIB_PATH)/libpvode_.so \
		-L $(BOUT_LIB_PATH) -Wl,--whole-archive -lpvode -Wl,--no-whole-archive \
		$(LDFLAGS)
	@$(CXX) -shared -Wl,-soname,libpvpre.so.1.0.0 -o $(BOUT_LIB_PATH)/libpvpre_.so \
		-L $(BOUT_LIB_PATH) -Wl,--whole-archive -lpvpre -Wl,--no-whole-archive \
		$(LDFLAGS)
	@mv $(BOUT_LIB_PATH)/libpvode_.so $(BOUT_LIB_PATH)/libpvode.so.1.0.0
	@mv $(BOUT_LIB_PATH)/libpvpre_.so $(BOUT_LIB_PATH)/libpvpre.so.1.0.0
	@ln -s libbout++.so.$(BOUT_VERSION) $(LIB_SO)
	@ln -s libpvode.so.1.0.0 $(BOUT_LIB_PATH)/libpvode.so
	@ln -s libpvpre.so.1.0.0 $(BOUT_LIB_PATH)/libpvpre.so
	@@SHARED_EXTRA@

# From the legacy build script:
# Then set the last two preqrequisites for 'all'
all: lib end_message

# Only needed for legacy build script
ifneq ("$(TARGET)","libfast")
# This to make sure build time is always printed correctly
.PHONY: bout++-time.cxx
endif

checksum:
	@echo $(CHECKSUM)

# From the legacy build script
initial_message:
	@echo ""
	@echo "----- Compiling BOUT++ -----" 
	@echo "CXX      = " $(CXX)
	@echo "FLAGS    = " $(BOUT_FLAGS)
	@echo "CHECKSUM = " $(CHECKSUM)
	@echo "INCLUDE  = " $(BOUT_INCLUDE)
	@rm -f $(BOUT_LIB_PATH)/libbout++.a

# From the legacy build script
end_message:
	@echo "Finished"
	@echo ""
