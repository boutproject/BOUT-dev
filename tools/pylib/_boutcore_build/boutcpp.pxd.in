#!/bin/bash
cat <<EOF
# distutils: language=c++

from libcpp cimport bool
from libcpp.string cimport string

cimport resolve_enum as benum
EOF
for ftype in "Field3D" "Field2D"
do
  if [ $ftype = "Field3D" ]; then fheader="field3d";
  elif [ $ftype = "Field2D" ]; then fheader="field2d";
  else
    echo "Error, unimplemented ftype"; exit 1
  fi
cat <<EOF

cdef extern from "$fheader.hxx":
    cppclass $ftype:
        $ftype(Mesh * mesh);
        $ftype(const $ftype &)
        double & operator()(int,int,int)
        int getNx()
        int getNy()
        int getNz()
        bool isAllocated()
        void setLocation(benum.CELL_LOC)
        benum.CELL_LOC getLocation()
        void applyBoundary(const string bndry)
        void applyBoundary()
        void applyBoundary(double t)
EOF
for f in sqrt exp log sin cos abs
do
    echo "    $ftype $f($ftype)"
done
cat <<EOF
    double max($ftype)
    double min($ftype)
    $ftype pow($ftype,double)
    $ftype & ddt($ftype)
EOF
done
cat <<EOF

cdef extern from "bout/mesh.hxx":
    cppclass Mesh:
        Mesh()
        @staticmethod
        Mesh * create(Options * option)
        void load()
        void setParallelTransform()
        void communicate(FieldGroup&)
        int getNXPE()
        int getNYPE()
        int getXProcIndex()
        int getYProcIndex()
        int xstart
        int ystart
        int LocalNx
        int LocalNy
        Coordinates * coordinates()

cdef extern from "bout/coordinates.hxx":
    cppclass Coordinates:
        Coordinates()
        Field2D dx, dy
        double dz
        Field2D J
        Field2D Bxy
        Field2D g11, g22, g33, g12, g13, g23
        Field2D g_11, g_22, g_33, g_12, g_13, g_23
        Field2D G1_11, G1_22, G1_33, G1_12, G1_13, G1_23
        Field2D G2_11, G2_22, G2_33, G2_12, G2_13, G2_23
        Field2D G3_11, G3_22, G3_33, G3_12, G3_13, G3_23
        Field2D G1, G2, G3
        Field2D ShiftTorsion
        Field2D IntShiftTorsion
        int geometry()
        int calcCovariant()
        int calcContravariant()
        int jacobian()

cdef extern from "bout/fieldgroup.hxx":
    cppclass FieldGroup:
        FieldGroup()
        void add(Field3D&)
cdef extern from "invert_laplace.hxx":
    cppclass Laplacian:
        @staticmethod
        Laplacian * create()
        @staticmethod
        Laplacian * create(Options *)
        Field3D solve(Field3D,Field3D)
        void setCoefA(Field3D)
        void setCoefC(Field3D)
        void setCoefC1(Field3D)
        void setCoefC2(Field3D)
        void setCoefD(Field3D)
        void setCoefEx(Field3D)
        void setCoefEy(Field3D)
        void setCoefEz(Field3D)

cdef extern from "difops.hxx":
    Field3D Div_par(Field3D, benum.CELL_LOC, benum.DIFF_METHOD)
    Field3D Grad_par(Field3D, benum.CELL_LOC, benum.DIFF_METHOD)
    Field3D Laplace(Field3D)
    Field3D Vpar_Grad_par(Field3D, Field3D, benum.CELL_LOC, benum.DIFF_METHOD)
    Field3D bracket(Field3D,Field3D, benum.BRACKET_METHOD, benum.CELL_LOC)
    Field3D Delp2(Field3D,double)

cdef extern from "options.hxx":
    cppclass Options:
        Options()
        @staticmethod
        Options * getRoot()
        Options * getSection(string fu)
        void set(string ,string,string, bool)
        void get(string ,string& ,string)
        void get(string ,double& ,double)
        void get(string ,bool& ,bool)
        void cleanCache()

cdef extern from "optionsreader.hxx":
    cppclass OptionsReader:
        @staticmethod
        OptionsReader *getInstance()
        void read(Options *options, const char *file);


cdef extern from "derivs.hxx":
EOF
for d in X Y Z
do
    for f in DDd D2Dd2 #VDDd FDDd
    do
        DD=${f/d/$d}
        echo "    Field3D $DD(Field3D, benum.CELL_LOC, benum.DIFF_METHOD, benum.REGION) except +"
    done
    for f in VDDd FDDd
    do
        DD=${f/d/$d}
        echo "    Field3D $DD(Field3D, Field3D, benum.CELL_LOC, benum.DIFF_METHOD, benum.REGION) except +"
    done
done
cat <<EOF

cdef extern from "interpolation.hxx":
    Field3D interp_to(Field3D, benum.CELL_LOC)

cdef extern from "field_factory.hxx":
    cppclass FieldFactory:
        FieldFactory(Mesh*,Options*)
        Field3D create3D(string bla, Options * o, Mesh * m,benum.CELL_LOC loc, double t)

cdef extern from "bout/solver.hxx":
    cppclass Solver:
        @staticmethod
        Solver * create()
        void setModel(PhysicsModel *)
        void add(Field3D, char * name)
        void solve()

cdef extern from "datafile.hxx":
    cppclass Datafile:
        void add(int &i, const char *name, bool save_repeat)
        void add(double &i, const char *name, bool save_repeat)
        void add(Field3D &i, const char *name, bool save_repeat)
        void write()

cdef extern from "bout/physicsmodel.hxx":
    cppclass PhysicsModel:
        int rhs(double t)
ctypedef void (*Method)(void *param, void *user_data)
cdef extern from "helper.h":
    cppclass PythonModel(PhysicsModel):
        int rhs(double t)
        void pyinit()
        void free()
        void solve()
        Solver * getSolver()
        void set_rhs_func(PythonModelCallback*)
        void set_init_func(PythonModelCallback*)
    cppclass PythonModelCallback:
        PythonModelCallback(Method method, void * user_data)
        void cy_execute(void * parameter)
    void throw_BoutException(string)

EOF
