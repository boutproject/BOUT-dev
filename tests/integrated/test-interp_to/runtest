#!/usr/bin/env python3

# 
# Run the test, compare results against the benchmark
#


from __future__ import print_function

try:
  from builtins import str
except:
  pass

vars = ['f2d', 'f2d_xlow', 'f2d_ylow', 'f3d', 'f3d_xlow', 'f3d_ylow', 'f3d_zlow']  # Variables to compare in all cells
vars_nobndry = ['f2d_xlow_nobndry', 'f2d_ylow_nobndry', 'f3d_xlow_nobndry', 'f3d_ylow_nobndry', 'f3d_zlow_nobndry']  # Variables to compare only in non-guard cells
tol = 1e-10                  # Absolute tolerance

from boututils.run_wrapper import shell, shell_safe, launch_safe, getmpirun
from boutdata.collect import collect
import numpy as np
from sys import stdout, exit

MPIRUN=getmpirun()

print("Making interp_to test")
shell_safe("make > make.log")

# Read benchmark values
print("Reading benchmark data")
bmk = {}
for v in vars:
  bmk[v] = collect(v, path="data", prefix="benchmark", info=False, xguards=True, yguards=True)
for v in vars_nobndry:
  bmk[v] = collect(v, path="data", prefix="benchmark", info=False, xguards=False, yguards=False)

print("Running FieldFactory test")
success = True

for nproc in [1,2,4]:
  cmd = "./test_interp_to"
  
  shell("rm data/BOUT.dmp.*.nc")

  print("   %d processor...." % (nproc))
  s, out = launch_safe(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)
  with open("run.log."+str(nproc), "w") as f:
    f.write(out)

   # Collect output data with guard cells
  for v in vars:
    stdout.write("      Checking variable "+v+" ... ")
    result = collect(v, path="data", info=False, xguards=True, yguards=True)
    # Compare benchmark and output
    if np.shape(bmk[v]) != np.shape(result):
      print("Fail, wrong shape")
      success = False
    diff =  np.max(np.abs(bmk[v] - result))
    if diff > tol:
      print("Fail, maximum difference = "+str(diff))
      success = False
    else:
      print("Pass")

   # Collect output data without guard cells
  for v in vars_nobndry:
    stdout.write("      Checking variable "+v+" ... ")
    result = collect(v, path="data", info=False, xguards=False, yguards=False)
    # Compare benchmark and output
    if np.shape(bmk[v]) != np.shape(result):
      print("Fail, wrong shape")
      success = False
    diff =  np.max(np.abs(bmk[v] - result))
    if diff > tol:
      print("Fail, maximum difference = "+str(diff))
      success = False
    else:
      print("Pass")

if success:
  print(" => All FieldFactory tests passed")
  exit(0)
else:
  print(" => Some failed tests")
  exit(1)
