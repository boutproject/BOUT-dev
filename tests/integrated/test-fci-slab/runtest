#!/usr/bin/env python3
#
# Python script to run and analyse MMS test
#
from __future__ import division
from __future__ import print_function
from builtins import zip
from builtins import str

from boututils.run_wrapper import shell, shell_safe, launch_safe, getmpirun
from boututils.datafile import DataFile
from boutdata.collect import collect

from numpy import sqrt, max, abs, mean, array, log, pi, polyfit, linspace, arange

import pickle

from sys import stdout

import zoidberg as zb

showPlot = False #Do we want to show the plot as well as save it to file.

nx = 5 # Not changed for these tests

# Resolution in y and z
nlist = [64,128] #[8,16,32,64,128,256]

nproc = 2

directory = "mms"

varlist = ["f", "g"]
markers = ['bo', 'r^']
labels = [r'$f$', r'$g$']

MPIRUN = getmpirun()

success=True

print("Making fci-slab test")
shell_safe("make > make.log")

error_2 = {}
error_inf = {}
for var in varlist:
    error_2[var]   = []  # The L2 error (RMS)
    error_inf[var] = []  # The maximum error

yperiodic=False  # Run with periodic Y?

for n in nlist:
    
    # Define the magnetic field using new poloidal gridding method
    # Note that the Bz and Bzprime parameters here must be the same as in mms.py
    field = zb.field.Slab(Bz=0.05, Bzprime=0.1)
    # Create rectangular poloidal grids
    poloidal_grid = zb.poloidal_grid.RectangularPoloidalGrid(nx,n,1.,1.)
    # Set the ylength and y locations
    ylength = 10.

    if yperiodic:
        ycoords = linspace(0.0, ylength, n, endpoint=False)
    else:
        # Doesn't include the end points
        ycoords = (arange(n) + 0.5)*ylength/float(n)
    
    # Create the grid
    grid = zb.grid.Grid(poloidal_grid, ycoords, ylength, yperiodic=yperiodic)
    # Make and write maps
    maps = zb.make_maps(grid, field)
    zb.write_maps(grid, field, maps, new_names=False, metric2d=True)
    
    args = " -d "+directory+" MZ="+str(n)+ " fci:y_periodic="+str(yperiodic)
    
    # Command to run
    cmd = "./fci_slab "+args

    print("Running command: "+cmd)
    
    # Launch using MPI
    s, out = launch_safe(cmd, runcmd=MPIRUN, nproc=nproc, mthread=1, pipe=True)

    # Save output to log file
    with open("run.log."+str(n), "w") as f:
        f.write(out)

    if s:
        print("Run failed!\nOutput was:\n")
        print(out)
        exit(s)

    for var in varlist:
        # Collect data
        E = collect("E_"+var, tind=[1,1], info=False, path=directory)
        E = E[:,2:-2, :,:]

        # Average error over domain
        l2 = sqrt(mean(E**2))
        linf = max(abs( E ))

        error_2[var].append( l2 )
        error_inf[var].append( linf )

        print("%s : l-2 %f l-inf %f" % (var, l2, linf))

dx = 1. / array(nlist)

# Save data
with open("fci_mms.pkl", "wb") as output:
    pickle.dump(nlist, output)
    pickle.dump(error_2, output)
    pickle.dump(error_inf, output)
    
# Calculate convergence order
for var,mark,label in zip(varlist, markers, labels):
    fit = polyfit(log(dx), log(error_2[var]), 1)
    order = fit[0]
    stdout.write("%s Convergence order = %f (fit)" % (var, order))

    order = log(error_2[var][-2]/error_2[var][-1])/log(dx[-2]/dx[-1])
    stdout.write(", %f (small spacing)" % (order,))
    
    if order > 1.5: # Should be second order accurate
        print("............ PASS")
    else:
        print("............ FAIL")
        success = False

if False:
    try:
        # Plot using matplotlib if available
        import matplotlib.pyplot as plt

        plt.figure()

        for var,mark,label in zip(varlist, markers, labels):
            plt.plot(dx, error_2[var], '-'+mark, label=label)
            plt.plot(dx, error_inf[var], '--'+mark)

        plt.legend(loc="upper left")
        plt.grid()

        plt.yscale('log')
        plt.xscale('log')

        plt.xlabel(r'Mesh spacing $\delta x$')
        plt.ylabel("Error norm")

        plt.savefig("fci-norm.pdf")

        print("Plot saved to fci-norm.pdf")

        if showPlot:
            plt.show()
        plt.close()
    except ImportError:
        print("No matplotlib")
else:
    print("Plotting disabled")

if success:
    exit(0)
else:
    exit(1)
