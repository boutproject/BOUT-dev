#!/usr/bin/env python3

#
# Run the test, compare results against the benchmark
#
# requires: netcdf
# requires: not legacy_netcdf
# cores: 4

from boutconfig import isMetric3D
from boututils.run_wrapper import build_and_log, shell, launch_safe
from boutdata.collect import collect
from boututils.datafile import DataFile

import numpy as np
from sys import exit

build_and_log("I/O test")

# Read benchmark values

vars = [
    "ivar",
    "ivar_vec",
    "svar",
    "rvar",
    "bvar",
    "f2d",
    "f3d",
    "fperp",
    "fperp2",
    "ivar_evol",
    "ivar_vec_evol",
    "svar_evol",
    "rvar_evol",
    "bvar_evol",
    "v2d_evol_x",
    "v2d_evol_y",
    "v2d_evol_z",
    "fperp2_evol",
]

field_vars = [
    "f2d",
    "f3d",
    "fperp",
    "fperp2",
    "v2d_evol_x",
    "v2d_evol_y",
    "v2d_evol_z",
    "fperp2_evol",
]  # Field quantities, not scalars

tol = 1e-10
print("Reading benchmark data")
bmk = {}
for v in vars:
    if "ivar_vec" in v or "svar" in v:
        f = DataFile("data/benchmark.out.0.nc")
        bmk[v] = f[v][...]
    else:
        bmk[v] = collect(v, path="data", prefix="benchmark.out", info=False)


# Executable name
test_exe = "./test_io"


def check_output():
    success = True
    for v in vars:
        print("      Checking variable " + v + " ... ", end="")
        if "ivar_vec" in v or "svar" in v:
            f = DataFile("data/BOUT.dmp.0.nc")
            result = f[v][...]
        else:
            result = collect(v, path="data", info=False)

        # Compare benchmark and output
        if np.shape(bmk[v]) != np.shape(result):
            if (
                isMetric3D()
                and v.startswith("v2d")
                and bmk[v].shape == result.shape[:-1]
            ):
                result = result[..., 0]
            else:
                print("Fail, wrong shape")
                print(v, bmk[v].shape, result.shape)
                success = False
                continue

        if result.dtype.kind not in np.typecodes["AllFloat"]:
            # Non-float types should be identical
            if not np.all(bmk[v] == result):
                print("Fail")
                success = False
                continue
        else:
            diff = np.max(np.abs(bmk[v] - result))
            if diff > tol:
                print("Fail, maximum difference = " + str(diff))
                success = False
                continue

        if isMetric3D() and v.startswith("v2d"):
            # Vector2Ds are based on Field3Ds for 3D metrics
            bmk[v].attributes["bout_type"] = "Field3D_t"
            bmk[v].attributes["direction_z"] = "Standard"

        for attrname in bmk[v].attributes:
            bmkattr = bmk[v].attributes[attrname]
            resattr = result.attributes[attrname]
            if not bmkattr == resattr:
                print(
                    "Fail: Attribute {} not the same for {}. Expected {}, got {}".format(
                        attrname, v, bmkattr, resattr
                    )
                )
                success = False

        if v in field_vars:
            # Check cell location
            if "cell_location" not in result.attributes:
                print("Fail: {0} has no cell_location attribute".format(v))
                success = False
                continue

            if result.attributes["cell_location"] != "CELL_CENTRE":
                print(
                    "Fail: Expecting cell_location == CELL_CENTRE, but got {0}".format(
                        result.attributes["cell_location"]
                    )
                )
                success = False
                continue

        print("Pass")

    return success


print("Running I/O test")
success = True
for nproc in [1, 2, 4]:
    for split in [None, "NXPE", "NYPE"]:
        if split is not None:
            npe_max = nproc
        else:
            npe_max = 1
        for np_split in [i for i in [1, 2, 4] if i <= npe_max]:

            if split is not None:
                extra_args = " {}={}".format(split, np_split)
            else:
                extra_args = ""

            cmd = test_exe + " check_double_add=true" + extra_args

            # On some machines need to delete dmp files first
            # or data isn't written correctly
            shell("rm -f data/BOUT.dmp.*")

            # Run test case
            print("   %d processor...." % (nproc) + extra_args)
            s, out = launch_safe(cmd, nproc=nproc, pipe=True)
            with open("run.log." + str(nproc), "w") as f:
                f.write(out)

            # Check processor splitting
            if split is not None:
                print("      Checking " + split + " ... ", end="")
                v = collect(split, path="data", info=False)
                if v != np_split:
                    print(
                        "Fail, wrong {} expecting {}, got {}".format(split, np_split, v)
                    )
                    success = False
                else:
                    print("Pass")

            # Check output
            if not check_output():
                success = False

# Test double-adding variables
print("Checking with identical variable added twice")
s, out = launch_safe(test_exe + " check_double_add=true", nproc=nproc, pipe=True)
if not check_output():
    success = False

print("Checking with different variables added with same name (expected throw)")
# Test incorrectly double-adding variables - should throw exception
for check_incorrect_add in [
    "ivar",
    "ivar_vec",
    "rvar",
    "bvar",
    "f2d",
    "f3d",
    "fperp",
    "ivar_evol",
    "ivar_vec_evol",
    "rvar_evol",
    "bvar_evol",
    "v2d_evol",
    "v3d_evol",
]:
    print("      Checking variable {} ... ".format(check_incorrect_add), end="")
    try:
        s, out = launch_safe(
            test_exe + " check_incorrect_add=" + check_incorrect_add,
            nproc=nproc,
            pipe=True,
        )
    except RuntimeError as e:
        if (
            "Variable with name '" + check_incorrect_add + "' already added to Datafile"
            in str(e)
        ):
            print("Pass")
        else:
            print(
                "Fail: Incorrect error message for check_incorrect_add="
                + check_incorrect_add
            )
            success = False
    else:
        # was supposed to fail and raise an exception
        print(
            "Fail: Did not raise an exception for incorrect double-add of "
            + check_incorrect_add
        )
        success = False

if success:
    print(" => All I/O tests passed")
    exit(0)
else:
    print(" => Some failed tests")
    exit(1)
