#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Run the test suite, report failures
#
# To set command for running parallel jobs, define environment variable
# e.g. for bash
# export MPIRUN="mpirun -np"
# export MPIRUN="aprun -n"

from __future__ import print_function
import os
import sys
import time
from boututils.run_wrapper import shell

# Get list of directories containing test cases
tests=[]
with open('test_suite_list') as testfile:
    for test in testfile:
        test=test.strip()
        if test.startswith("#"):
            pass
        elif test.startswith("!"):
            tests.append(test[1:])
        else:
            tests.append(test)

##################################################################

savepath = os.getcwd() # Save current working directory
npassed = 0
nfailed = 0
total = len(tests)
failed  = []
skipped = []
start_time = time.time()

print("======= Starting {0} tests ========".format(savepath.split("/")[-1]))
print("Running {0} tests".format(total))

for t in tests:
    os.chdir(t)

    start_time_ = time.time()
    # Run test, piping stdout so it is not sent to console
    status,out = shell("./runtest", pipe=True)

    if status == 42:
        print(u"S", end='') # No newline
        skipped.append((t,out))
    elif status != 0:
        # ðŸ—™Failed
        print(u"\U0001F5D9", end='') # No newline
        nfailed = nfailed + 1
        failed.append((t, out))
    else:
        # âœ“ Passed
        print(u"\U00002713", end='') # No newline
        npassed = npassed + 1

    print(" %7.3f s - %s"%(time.time() - start_time_,t))
    sys.stdout.flush() # Make sure '.' or 'F' is flushed
    os.chdir(savepath)

elapsed_time = time.time() - start_time

print("\n")
if skipped:
    print("======= SKIPPED  ========")
    for test, output in skipped:
        print(u"\n----- {0} -----\n{1}".format(test, output))
if nfailed > 0:
    print("======= FAILURES ========")
    for test, output in failed:
        # Note: need Unicode string in case output contains unicode
        print(u"\n----- {0} -----\n{1}".format(test, output))

    print("======= {0} failed in {1:.2f} seconds ========".format(nfailed, elapsed_time))

    sys.exit(1)

else:
    print("======= All tests passed in {0:.2f} seconds =======".format(elapsed_time))
