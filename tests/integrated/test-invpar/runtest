#!/usr/bin/env python3

#
# Run the test, check it completed successfully
#

# Requires: netcdf
# Cores: 4

from __future__ import print_function

try:
    from builtins import str
except:
    pass
from boututils.run_wrapper import build_and_log, shell, launch_safe
from boutdata.collect import collect
from sys import stdout, exit


build_and_log("parallel inversion test")

flags = [
    "acoef=1 bcoef=0 ccoef=0 dcoef=0 ecoef=0",
    "acoef=1.5 'bcoef=2.*sin(2*y)'",
    "acoef=1",
    "bcoef=2",
    "ccoef=1.793",
    "ccoef=3 bcoef=0",
    "dcoef=3.5",
    "ecoef=-1",
    "'input=ballooning(exp(-y*y)*cos(z)*gauss(x,0.2))'",
]

locations = ["CELL_CENTRE", "CELL_XLOW", "CELL_YLOW", "CELL_ZLOW"]
flags = [f + " test_location=" + l for f in flags for l in locations]

regions = ["", " mesh:ixseps1=0 mesh:ixseps2=0"]
flags = [f + r for f in flags for r in regions]

code = 0  # Return code
for nproc in [1, 2, 4]:
    cmd = "./test_invpar"

    print("   %d processors...." % (nproc))
    r = 0
    for f in flags:
        stdout.write("\tflags '" + f + "' ... ")

        shell("rm data/BOUT.dmp.* 2> err.log")

        # Run the case
        s, out = launch_safe(cmd + " " + f, nproc=nproc, mthread=1, pipe=True)

        with open("run.log." + str(nproc) + "." + str(r), "w") as outfile:
            outfile.write(out)

        r = r + 1

        # Find out if it worked
        allpassed = collect("allpassed", path="data", info=False)
        if allpassed:
            print("PASSED")
        else:
            print("FAILED")
            code = 1

if code == 0:
    print(" => All inversion tests passed")
else:
    print(" => Some failed tests")

exit(code)
